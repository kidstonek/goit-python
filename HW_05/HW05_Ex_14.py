"""
Задача будет похожа на предыдущую, но теперь в тексте мы будем искать номер телефона Украины в международном формате,
шаблон которого следующий: +380(67)777-7-777 или +380(67)777-77-77

Напишите регулярное выражение для функции find_all_phones, которая будет
в тексте (параметр text) находить все телефонные номера указанного шаблона и возвращать список полученных из текста совпадений.

В целях упрощения примем, что:

используем только цифры и символы +, (, ) и -
телефонный номер начинается с символа +
шаблон телефона символ + потом три цифры 380, символ (, две цифры, символ ), три цифры, символ -, одна или две цифры, символ -,
две или три цифры
длина шаблона телефонного номера всегда 17 символов
Данное регулярное выражение ни в коей мере не претендует на покрытие всех возможных вариантов телефонных номеров.

При выполнении этого задания мы рекомендуем использовать следующий сервис для проверок регулярных выражений regex101.

Функция find_all_phones возвращает неправильный результат: ['+380(67)777-7-771', '+380(67)777-77-77', '+380(67)111-777-777', '+380(67)777-77-787']. 
Ожидалось, что функция find_all_phones при получении параметра 
'Irma +380(67)777-7-771 second +380(67)777-77-77 aloha a@test.com abc111@test.com.net +380(67)111-777-777+380(67)777-77-787' 
вернет следующий список ['+380(67)777-7-771', '+380(67)777-77-77', '+380(67)777-77-78']
"""

import re


def find_all_phones(text):
    result = re.findall(r"[\+][380]{3}[\(][\d]{2}[\)][\d]{1,}[\-][\d]{2}[\-][\d]{1,2}|[\+][380]{3}[\(][\d]{2}[\)][\d]{3}[\-d]{1,}[\d][\-d][\d]{3}", text)
    return result

def main():
    all_phones = 'Irma +380(67)777-7-771 second +380(67)777-77-77 aloha a@test.com abc111@test.com.net +380(67)111-777-777+380(67)777-77-787'
    print(find_all_phones(all_phones))


if __name__ == '__main__':
    main()